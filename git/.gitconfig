[user]
  name = Mark Dennehy
  email = mark.dennehy@workday.com

[help]
	autocorrect = 1

[github]
  user = mdennehy
  token = 08d3a518ea7b7fd4a51db28c0504fc0cb012f4e4

[branch]
  autosetuprebase = always

[core]
  editor = /usr/local/bin/vim -f
  whitespace = trailing-space

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[merge]
	tool = kdiff3

[diff]
  guitool = kdiff3

[difftool "kdiff3"]
  path = /usr/local/bin/kdiff3

[mergetool "kdiff3"]
  path = /usr/local/bin/kdiff3

[credential]
	helper = osxkeychain

[alias]
  # list existing aliases
  la = "!git config -l | grep alias | cut -c 7-"

  # find an alias by the command it aliases
  # (http://brettterpstra.com/2014/08/04/shell-tricks-one-git-alias-to-rule-them-all/)
  finda = "!grepalias() { git config --global --get-regexp alias | grep -i \"$1\" | awk -v nr=2 '{sub(/^alias\\./,\"\")};{printf \"\\033[31m%_10s\\033[1;37m\", $1};{sep=FS};{for (x=nr; x<=NF; x++) {printf \"%s%s\", sep, $x; }; print \"\\033[0;39m\"}'; }; grepalias"

  # compact git logs with various formatting
  lst = log --pretty=format:\"%C(yellow)%h %Cred%ad %Creset %s%C(yellow)%d %C(cyan)[%an]\" --decorate --graph --date=short
  llt = log --pretty=format:\"%C(yellow)%h %Cred%ad %Creset s%C(yellow)%d %C(cyan)[%an]\" --decorate --numstat --date=short
  ls = log --pretty=format:\"%C(yellow)%h %Cred%ad %Creset%s %C(cyan)[%an]\" --decorate --graph --date=short
  ll = log --pretty=format:\"%C(yellow)%h %Cred%ad %Creset%s %C(cyan)[%an]\" --decorate --numstat --date=short
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
  history = log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  summary = log --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  # standard short-hands for daily workflow operations
  cp = cherry-pick
  st = status -s
  cl = clone
  ci = commit
  co = checkout
  br = branch
  diff = diff --word-diff
  dc = diff --cached
  ir = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  pr = pull --rebase

  # commit amend last commit
  ca = commit -a --amend --reset-author
  can = commit -a --amend --reset-author --no-edit

  # create new feature branch off master. usage: git nb msw-0001
  nb = !sh -c 'git checkout -b $1 --track origin/master' -

  # create review branch for crucible. usage: git rv 0, git rv 1, ...
  rv = !sh -c 'cb=$(git rev-parse --abbrev-ref HEAD) && git push origin $cb:$cb-$1' -
  # list existing crucible review branches for current feature branch
  rvl = !sh -c 'cb=$(git rev-parse --abbrev-ref HEAD) && git branch --all | grep $cb' -

  # create gerrit reviews
  review = "!f() { if [ -z $1 ]; then echo \"Usage: git review <branch> <topic>\"; else if [ -z $2 ]; then git push origin HEAD:refs/for/$1; else git push origin HEAD:refs/for/$1/$2 ; fi; fi; }; f"

  # create gerrit drafts
  draft = "!f() { if [ -z $1 ]; then echo \"Usage: git draft <branch> <topic>\"; else if [ -z $2 ]; then git push origin HEAD:refs/drafts/$1; else git push origin HEAD:refs/drafts/$1/$2 ; fi; fi; }; f"

  # shorthand for above with no param as a draft (assumes targeting master and uses current branch name as tag/topic)
  gdr = !sh -c 'cb=$(git rev-parse --abbrev-ref HEAD) && git push origin HEAD:refs/drafts/master/$cb' -

  # shorthand for above with no param (assumes targeting master and uses current branch name as tag/topic)
  grv = !sh -c 'cb=$(git rev-parse --abbrev-ref HEAD) && git push origin HEAD:refs/for/master/$cb' -

  # as above but adding mia team members as reviewers
  grvmia = !sh -c 'cb=$(git rev-parse --abbrev-ref HEAD) && git push --receive-pack=\"git receive-pack --reviewer david.beaurpere@workday.com --reviewer brian.martin@workday.com --reviewer daniele.andreatta@workday.com --reviewer gary.boland@workday.com --reviewer owen.sullivan@workday.com --reviewer liam.creagh@workday.com --reviewer brian.brazil@workday.com\" origin HEAD:refs/for/master/$cb' -

  sync = "!f() { echo \"Syncing $1 with master\" && git pull --rebase origin master; }; f"

  # Nice branch diagrams
  # from https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298
  lg = !"git lg1"
  lg1 = !"git lg1-specific --all"
  lg2 = !"git lg2-specific --all"
  lg3 = !"git lg3-specific --all"

  lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
  lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
  lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
